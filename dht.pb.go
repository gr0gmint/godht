// Code generated by protoc-gen-go from "dht.proto"
// DO NOT EDIT!

package dht

import proto "goprotobuf.googlecode.com/hg/proto"

// Reference proto import to suppress error if it's not otherwise used.
var _ = proto.GetString

type PktType int32
const (
	PktType_PING = 1
	PktType_STORE = 2
	PktType_FINDNODE = 3
	PktType_CHECKREACHABILITY = 5
	PktType_ANSWEROK = 50
	PktType_ANSWERPONG = 51
	PktType_ANSWERNODES = 52
	PktType_ANSWERERROR = 53
)
var PktType_name = map[int32] string {
	1: "PING",
	2: "STORE",
	3: "FINDNODE",
	5: "CHECKREACHABILITY",
	50: "ANSWEROK",
	51: "ANSWERPONG",
	52: "ANSWERNODES",
	53: "ANSWERERROR",
}
var PktType_value = map[string] int32 {
	"PING": 1,
	"STORE": 2,
	"FINDNODE": 3,
	"CHECKREACHABILITY": 5,
	"ANSWEROK": 50,
	"ANSWERPONG": 51,
	"ANSWERNODES": 52,
	"ANSWERERROR": 53,
}
func NewPktType(x int32) *PktType {
	e := PktType(x)
	return &e
}

type Cipher int32
const (
	Cipher_AES = 1
	Cipher_RC4 = 2
)
var Cipher_name = map[int32] string {
	1: "AES",
	2: "RC4",
}
var Cipher_value = map[string] int32 {
	"AES": 1,
	"RC4": 2,
}
func NewCipher(x int32) *Cipher {
	e := Cipher(x)
	return &e
}

type Err int32
const (
	Err_NEEDPUBLICKEY = 1
	Err_NOT_ACCEPTED = 2
)
var Err_name = map[int32] string {
	1: "NEEDPUBLICKEY",
	2: "NOT_ACCEPTED",
}
var Err_value = map[string] int32 {
	"NEEDPUBLICKEY": 1,
	"NOT_ACCEPTED": 2,
}
func NewErr(x int32) *Err {
	e := Err(x)
	return &e
}

type CryptoHeader struct {
	Isencrypted	*bool	"PB(varint,1,req,name=isencrypted)"
	Hmac	[]byte	"PB(bytes,2,opt,name=hmac)"
	Key	[]byte	"PB(bytes,3,opt,name=key)"
	Iv	[]byte	"PB(bytes,4,opt,name=iv)"
	Checksum	[]byte	"PB(bytes,5,opt,name=checksum)"
	Ciphermethod	*Cipher	"PB(varint,6,opt,name=ciphermethod,enum=dht.Cipher)"
	XXX_unrecognized	[]byte
}
func (this *CryptoHeader) Reset() {
	*this = CryptoHeader{}
}
func NewCryptoHeader() *CryptoHeader {
	return new(CryptoHeader)
}

type Header struct {
	Type	*PktType	"PB(varint,1,req,name=type,enum=dht.PktType)"
	Msgid	*int32	"PB(varint,2,req,name=msgid)"
	Part	*int32	"PB(varint,3,req,name=part)"
	From	*NodeDescriptor	"PB(bytes,6,opt,name=from)"
	Knowsyou	*bool	"PB(varint,8,req,name=knowsyou)"
	Relayedfrom	*NodeDescriptor	"PB(bytes,9,opt,name=relayedfrom)"
	XXX_unrecognized	[]byte
}
func (this *Header) Reset() {
	*this = Header{}
}
func NewHeader() *Header {
	return new(Header)
}

type Ping struct {
	XXX_unrecognized	[]byte
}
func (this *Ping) Reset() {
	*this = Ping{}
}
func NewPing() *Ping {
	return new(Ping)
}

type Pong struct {
	XXX_unrecognized	[]byte
}
func (this *Pong) Reset() {
	*this = Pong{}
}
func NewPong() *Pong {
	return new(Pong)
}

type Ignore struct {
	XXX_unrecognized	[]byte
}
func (this *Ignore) Reset() {
	*this = Ignore{}
}
func NewIgnore() *Ignore {
	return new(Ignore)
}

type Store struct {
	Key	[]byte	"PB(bytes,1,req,name=key)"
	Value	[]byte	"PB(bytes,2,req,name=value)"
	Ismore	*bool	"PB(varint,3,req,name=ismore)"
	XXX_unrecognized	[]byte
}
func (this *Store) Reset() {
	*this = Store{}
}
func NewStore() *Store {
	return new(Store)
}

type FindNode struct {
	Key	[]byte	"PB(bytes,1,req,name=key)"
	Findvalue	*bool	"PB(varint,2,req,name=findvalue)"
	XXX_unrecognized	[]byte
}
func (this *FindNode) Reset() {
	*this = FindNode{}
}
func NewFindNode() *FindNode {
	return new(FindNode)
}

type CheckReachability struct {
	Port	*int32	"PB(varint,1,req,name=port)"
	XXX_unrecognized	[]byte
}
func (this *CheckReachability) Reset() {
	*this = CheckReachability{}
}
func NewCheckReachability() *CheckReachability {
	return new(CheckReachability)
}

type Transport struct {
	Data	[]byte	"PB(bytes,1,req,name=data)"
	XXX_unrecognized	[]byte
}
func (this *Transport) Reset() {
	*this = Transport{}
}
func NewTransport() *Transport {
	return new(Transport)
}

type NodeDescriptor struct {
	Udpport	*int32	"PB(varint,1,req,name=udpport)"
	Behindnat	*bool	"PB(varint,2,req,name=behindnat)"
	Nodeid	[]byte	"PB(bytes,3,req,name=nodeid)"
	Publickey	*Publickey	"PB(bytes,4,opt,name=publickey)"
	Ipaddr	[]byte	"PB(bytes,5,opt,name=ipaddr)"
	XXX_unrecognized	[]byte
}
func (this *NodeDescriptor) Reset() {
	*this = NodeDescriptor{}
}
func NewNodeDescriptor() *NodeDescriptor {
	return new(NodeDescriptor)
}

type Publickey struct {
	Modulus	[]byte	"PB(bytes,1,req,name=modulus)"
	Exponent	*int32	"PB(varint,2,req,name=exponent)"
	XXX_unrecognized	[]byte
}
func (this *Publickey) Reset() {
	*this = Publickey{}
}
func NewPublickey() *Publickey {
	return new(Publickey)
}

type AnswerOk struct {
	Ok	*bool	"PB(varint,1,req,name=ok)"
	XXX_unrecognized	[]byte
}
func (this *AnswerOk) Reset() {
	*this = AnswerOk{}
}
func NewAnswerOk() *AnswerOk {
	return new(AnswerOk)
}

type AnswerFindNode struct {
	Nodes	[]*NodeDescriptor	"PB(bytes,1,rep,name=nodes)"
	Value	[]byte	"PB(bytes,2,opt,name=value)"
	XXX_unrecognized	[]byte
}
func (this *AnswerFindNode) Reset() {
	*this = AnswerFindNode{}
}
func NewAnswerFindNode() *AnswerFindNode {
	return new(AnswerFindNode)
}

type AnswerError struct {
	Error	*Err	"PB(varint,1,req,name=error,enum=dht.Err)"
	XXX_unrecognized	[]byte
}
func (this *AnswerError) Reset() {
	*this = AnswerError{}
}
func NewAnswerError() *AnswerError {
	return new(AnswerError)
}

func init() {
	proto.RegisterEnum("dht.PktType", PktType_name, PktType_value)
	proto.RegisterEnum("dht.Cipher", Cipher_name, Cipher_value)
	proto.RegisterEnum("dht.Err", Err_name, Err_value)
}
