package dht;

enum PktType {
    PING = 1;
    STORE = 2;
    FINDNODE = 3;
    CHECKREACHABILITY = 5;
    ANSWEROK = 50;
    ANSWERPONG = 51;
    ANSWERNODES = 52;
    ANSWERERROR = 53;
    DECRYPTERROR = 54;
}
enum Cipher {
    AES = 1;
    RC4 = 2;
}

message CryptoHeader {
    required bool isencrypted = 1;
    optional bytes hmac = 2;
    optional bytes key = 3;
    optional bytes iv = 4;
    optional bytes checksum = 5;
    optional Cipher ciphermethod = 6;
    required bool needkey = 7;
}

message Header { 
    required PktType type = 1;
    required int32 msgid = 2;
    required int32 part = 3; //Kinda like conversation packet counter
    required int64 timestamp = 4;
    optional NodeDescriptor from = 6;
    required bool knowsyou = 8;
    optional NodeDescriptor relayedfrom = 9;
}


message Ping {

}
message Pong {
}
message Ignore {

}
message Store {
    required bytes key = 1;
    required bytes value = 2;
    
    required bool ismore = 3;
}
message FindNode {
    required bytes key = 1;
    required bool findvalue = 2;
}

message CheckReachability {
    required int32 port = 1;
}

message Dummy {
}


message NodeDescriptor { //Like a "from" field
    required int32 udpport = 1;
    required bool behindnat = 2;
    required bytes nodeid = 3;
    optional Publickey publickey = 4;
    optional bytes ipaddr = 5;
}
message Publickey {
    required bytes modulus = 1;
    required int32 exponent = 2;
}

message AnswerOk {
    required bool ok = 1;
}

message AnswerFindNode {
    repeated NodeDescriptor nodes = 1;
    optional bytes value = 2;
}
enum Err {
    NEEDPUBLICKEY = 1;
    NOT_ACCEPTED = 2;
    
}
message AnswerError {
    required Err error = 1;
}
message DecryptError {
    
}
